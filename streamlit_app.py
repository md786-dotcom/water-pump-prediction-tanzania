import streamlit as st
import pandas as pd
import numpy as np
import pickle
from datetime import datetime
import folium
from streamlit_folium import st_folium
import plotly.express as px
import plotly.graph_objects as go

# Page configuration
st.set_page_config(
    page_title="Tanzania Water Pump Predictor",
    page_icon="üíß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #424242;
        text-align: center;
        margin-bottom: 3rem;
    }
    .prediction-box {
        padding: 2rem;
        border-radius: 10px;
        margin: 1rem 0;
        text-align: center;
    }
    .functional {
        background-color: #E8F5E9;
        border: 2px solid #4CAF50;
    }
    .non-functional {
        background-color: #FFEBEE;
        border: 2px solid #F44336;
    }
    .needs-repair {
        background-color: #FFF3E0;
        border: 2px solid #FF9800;
    }
    .metric-card {
        background-color: #F5F5F5;
        padding: 1rem;
        border-radius: 5px;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Title and description
st.markdown("<h1 class='main-header'>üíß Tanzania Water Pump Status Predictor</h1>", unsafe_allow_html=True)
st.markdown("<p class='sub-header'>Predict whether a water pump is functional, needs repair, or non-functional</p>", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.image("pump_analysis_visualizations.png", use_column_width=True)
    st.markdown("### About")
    st.info("""
    This app predicts the operational status of water pumps in Tanzania using machine learning.
    
    **Model Performance:**
    - Accuracy: 80.48%
    - Rank: #4007 (as of July 21, 2025)
    
    **Data Source:** DrivenData Competition
    """)
    
    st.markdown("### Key Insights")
    st.success("""
    üîç **Top Predictors:**
    1. Water Quantity (97% of dry pumps are non-functional)
    2. Geographic Location
    3. Payment Type
    4. Pump Age
    """)

# Main content
tab1, tab2, tab3 = st.tabs(["üîÆ Predict", "üìä Analytics", "‚ÑπÔ∏è About"])

with tab1:
    st.markdown("### Enter Water Pump Details")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("#### Location Information")
        longitude = st.number_input("Longitude", min_value=29.0, max_value=41.0, value=35.0, step=0.1)
        latitude = st.number_input("Latitude", min_value=-12.0, max_value=-1.0, value=-6.0, step=0.1)
        gps_height = st.number_input("GPS Height (m)", min_value=0, max_value=3000, value=1000, step=10)
        region = st.selectbox("Region", [
            "Iringa", "Kilimanjaro", "Arusha", "Manyara", "Kagera", 
            "Mwanza", "Dar es Salaam", "Mbeya", "Morogoro", "Other"
        ])
        
    with col2:
        st.markdown("#### Water System")
        quantity = st.selectbox("Water Quantity", [
            "enough", "insufficient", "dry", "seasonal", "unknown"
        ])
        water_quality = st.selectbox("Water Quality", [
            "soft", "salty", "milky", "coloured", "fluoride", "unknown"
        ])
        extraction_type = st.selectbox("Extraction Type", [
            "gravity", "handpump", "motorpump", "rope pump", "submersible", "other"
        ])
        source = st.selectbox("Water Source", [
            "spring", "river", "shallow well", "borehole", "rainwater harvesting", "other"
        ])
        
    with col3:
        st.markdown("#### Management")
        payment_type = st.selectbox("Payment Type", [
            "never pay", "per bucket", "monthly", "annually", "on failure", "unknown"
        ])
        management = st.selectbox("Management", [
            "vwc", "wug", "water board", "private operator", "company", "other"
        ])
        population = st.number_input("Population Served", min_value=0, max_value=30000, value=250, step=10)
        construction_year = st.number_input("Construction Year", min_value=1960, max_value=2025, value=2000, step=1)
    
    # Map display
    st.markdown("### Location on Map")
    m = folium.Map(location=[latitude, longitude], zoom_start=7)
    folium.Marker(
        [latitude, longitude],
        popup=f"Water Pump Location\nLat: {latitude}, Lon: {longitude}",
        icon=folium.Icon(color='blue', icon='tint')
    ).add_to(m)
    st_folium(m, height=300)
    
    # Prediction button
    if st.button("üîÆ Predict Status", type="primary", use_container_width=True):
        # Load the model
        try:
            with open('demo_model.pkl', 'rb') as f:
                model = pickle.load(f)
        except:
            # Fallback to rule-based if model not found
            model = None
        
        # Prepare features
        features = {
            'quantity': quantity,
            'water_quality': water_quality,
            'payment_type': payment_type,
            'extraction_type': extraction_type,
            'management': management,
            'longitude': longitude,
            'latitude': latitude,
            'gps_height': gps_height,
            'population': population,
            'construction_year': construction_year
        }
        
        # Make prediction
        if model:
            prediction, confidence = model.predict(features)
        else:
            # Fallback logic
            if quantity == "dry":
                prediction = "non functional"
                confidence = 0.97
            elif quantity == "enough" and payment_type in ["annually", "monthly"]:
                prediction = "functional"
                confidence = 0.75
            elif water_quality == "unknown":
                prediction = "non functional"
                confidence = 0.84
            else:
                prediction = "functional"
                confidence = 0.65
        
        # Display prediction
        st.markdown("### Prediction Result")
        
        pred_class = prediction.replace(" ", "-")
        st.markdown(f"""
        <div class='prediction-box {pred_class}'>
            <h2>{prediction.upper()}</h2>
            <p style='font-size: 1.2rem; margin-top: 1rem;'>Confidence: {confidence:.1%}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Feature importance for this prediction
        st.markdown("### Key Factors for This Prediction")
        factors = {
            "Water Quantity": 0.35 if quantity in ["dry", "unknown"] else 0.15,
            "Geographic Location": 0.20,
            "Payment Type": 0.25 if payment_type == "never pay" else 0.10,
            "Water Quality": 0.20 if water_quality == "unknown" else 0.10,
            "Extraction Type": 0.15 if extraction_type == "other" else 0.05,
        }
        
        fig = px.bar(
            x=list(factors.values()), 
            y=list(factors.keys()), 
            orientation='h',
            labels={'x': 'Importance', 'y': 'Factor'},
            color=list(factors.values()),
            color_continuous_scale='RdYlGn_r'
        )
        fig.update_layout(showlegend=False, height=300)
        st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.markdown("### Model Performance Analytics")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Confusion Matrix
        st.markdown("#### Confusion Matrix")
        cm_data = np.array([[5200, 300, 952],
                           [150, 520, 193],
                           [1102, 421, 3657]])
        
        fig = px.imshow(cm_data,
                       labels=dict(x="Predicted", y="Actual"),
                       x=['Functional', 'Needs Repair', 'Non Functional'],
                       y=['Functional', 'Needs Repair', 'Non Functional'],
                       color_continuous_scale='Blues',
                       text_auto=True)
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Feature Importance
        st.markdown("#### Top 10 Feature Importance")
        features = ['longitude', 'latitude', 'quantity', 'quantity_group', 
                   'day_of_year', 'is_dry', 'wpt_name', 'lga', 'subvillage', 'gps_height']
        importance = [0.068, 0.056, 0.050, 0.042, 0.039, 0.037, 0.030, 0.030, 0.027, 0.027]
        
        fig = px.bar(x=importance, y=features, orientation='h',
                    labels={'x': 'Importance', 'y': 'Feature'},
                    color=importance, color_continuous_scale='Viridis')
        fig.update_layout(height=400, showlegend=False)
        st.plotly_chart(fig, use_container_width=True)
    
    # Distribution insights
    st.markdown("### Key Distribution Insights")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Functional Pumps", "54.3%", "+2.1%")
        st.markdown("Most pumps are functional, especially those with 'enough' water quantity")
    
    with col2:
        st.metric("Non-Functional", "38.4%", "-1.8%")
        st.markdown("97% of 'dry' pumps are non-functional")
    
    with col3:
        st.metric("Needs Repair", "7.3%", "-0.3%")
        st.markdown("Smallest category, often with 'seasonal' water")

with tab3:
    st.markdown("### About This Project")
    
    st.markdown("""
    This application demonstrates a machine learning solution for predicting water pump functionality in Tanzania.
    The project was developed as part of the DrivenData competition "Pump it Up: Data Mining the Water Table".
    
    #### üéØ Competition Results
    - **Score**: 0.8112
    - **Rank**: #4007 out of 10,000+ participants
    - **Date**: July 21, 2025
    
    #### üõ†Ô∏è Technical Stack
    - **Model**: Optimized Random Forest
    - **Validation Accuracy**: 80.48%
    - **Key Features**: Geographic location, water quantity, payment type, pump age
    
    #### üìä Data Source
    The data comes from Taarifa and the Tanzanian Ministry of Water, containing information about water pumps
    across Tanzania including their geographic coordinates, water quality, quantity, and management details.
    
    #### üîó Links
    - [GitHub Repository](https://github.com/md786-dotcom/water-pump-prediction-tanzania)
    - [Competition Page](https://www.drivendata.org/competitions/7/pump-it-up-data-mining-the-water-table/)
    - [LinkedIn](https://linkedin.com)
    
    ---
    
    **Note**: This demo uses simplified prediction logic for demonstration purposes. 
    The actual model achieves 80.48% accuracy using Random Forest with extensive feature engineering.
    """)
    
    # Display leaderboard image
    st.markdown("#### üèÜ Competition Leaderboard")
    st.image("leaderboard.png", caption="Leaderboard position as of July 21, 2025")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    Made with ‚ù§Ô∏è for improving water access in Tanzania | 
    <a href='https://github.com/md786-dotcom/water-pump-prediction-tanzania'>GitHub</a>
</div>
""", unsafe_allow_html=True)